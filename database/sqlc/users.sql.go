// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package database

import (
	"context"
)

const changeUserAccess = `-- name: ChangeUserAccess :exec
UPDATE "Users" SET "access_level" = $2
WHERE id = $1
`

type ChangeUserAccessParams struct {
	ID          int64 `json:"id"`
	AccessLevel int64 `json:"access_level"`
}

func (q *Queries) ChangeUserAccess(ctx context.Context, arg ChangeUserAccessParams) error {
	_, err := q.db.ExecContext(ctx, changeUserAccess, arg.ID, arg.AccessLevel)
	return err
}

const changeUserPassword = `-- name: ChangeUserPassword :exec
UPDATE "Users" SET password = $2
WHERE id = $1
`

type ChangeUserPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) ChangeUserPassword(ctx context.Context, arg ChangeUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, changeUserPassword, arg.ID, arg.Password)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "Users" (
    username,
    password,
    email,
    access_level
) VALUES (
    $1, $2, $3, $4
) RETURNING id, username, password, email, created_at, last_login, access_level
`

type CreateUserParams struct {
	Username    string `json:"username"`
	Password    string `json:"password"`
	Email       string `json:"email"`
	AccessLevel int64  `json:"access_level"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.AccessLevel,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.LastLogin,
		&i.AccessLevel,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "Users"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, created_at, last_login, access_level FROM "Users"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.LastLogin,
		&i.AccessLevel,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, email, created_at, last_login, access_level FROM "Users"
ORDER BY "username"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.LastLogin,
			&i.AccessLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
