// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: moderators.sql

package generated

import (
	"context"
	"database/sql"
)

const createDomainBanRecord = `-- name: CreateDomainBanRecord :exec
INSERT INTO "BanActions" (
    taken_by,
    target_user,
    reason,
    domain,
    set_banned_to
) VALUES ($1,$2,$3,$4,$5)
`

type CreateDomainBanRecordParams struct {
	TakenBy     int64          `json:"taken_by"`
	TargetUser  int64          `json:"target_user"`
	Reason      sql.NullString `json:"reason"`
	Domain      sql.NullString `json:"domain"`
	SetBannedTo sql.NullBool   `json:"set_banned_to"`
}

func (q *Queries) CreateDomainBanRecord(ctx context.Context, arg CreateDomainBanRecordParams) error {
	_, err := q.db.ExecContext(ctx, createDomainBanRecord,
		arg.TakenBy,
		arg.TargetUser,
		arg.Reason,
		arg.Domain,
		arg.SetBannedTo,
	)
	return err
}

const createDomainModeratorAssignment = `-- name: CreateDomainModeratorAssignment :exec
INSERT INTO "DomainModeratorAssignments" (
    domain,
    assigned_to,
    assigned_by,
    is_deactivation
) VALUES (
    $1, $2, $3, $4
)
`

type CreateDomainModeratorAssignmentParams struct {
	Domain         string `json:"domain"`
	AssignedTo     int64  `json:"assigned_to"`
	AssignedBy     int64  `json:"assigned_by"`
	IsDeactivation bool   `json:"is_deactivation"`
}

func (q *Queries) CreateDomainModeratorAssignment(ctx context.Context, arg CreateDomainModeratorAssignmentParams) error {
	_, err := q.db.ExecContext(ctx, createDomainModeratorAssignment,
		arg.Domain,
		arg.AssignedTo,
		arg.AssignedBy,
		arg.IsDeactivation,
	)
	return err
}

const createGlobalModeratorAssignment = `-- name: CreateGlobalModeratorAssignment :exec
INSERT INTO "GlobalModeratorAssignments" (
    assigned_to,
    assigned_by,
    is_deactivation
) VALUES (
    $1, $2, $3
)
`

type CreateGlobalModeratorAssignmentParams struct {
	AssignedTo     int64        `json:"assigned_to"`
	AssignedBy     int64        `json:"assigned_by"`
	IsDeactivation sql.NullBool `json:"is_deactivation"`
}

func (q *Queries) CreateGlobalModeratorAssignment(ctx context.Context, arg CreateGlobalModeratorAssignmentParams) error {
	_, err := q.db.ExecContext(ctx, createGlobalModeratorAssignment, arg.AssignedTo, arg.AssignedBy, arg.IsDeactivation)
	return err
}

const createModerationRecord = `-- name: CreateModerationRecord :exec
INSERT INTO "CommentModerationActions" (
    taken_by,
    comment_id,
    reason,
    set_hidden_to,
    set_removed_to,
    associated_report
) VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateModerationRecordParams struct {
	TakenBy          int64          `json:"taken_by"`
	CommentID        int64          `json:"comment_id"`
	Reason           sql.NullString `json:"reason"`
	SetHiddenTo      sql.NullBool   `json:"set_hidden_to"`
	SetRemovedTo     sql.NullBool   `json:"set_removed_to"`
	AssociatedReport sql.NullInt64  `json:"associated_report"`
}

func (q *Queries) CreateModerationRecord(ctx context.Context, arg CreateModerationRecordParams) error {
	_, err := q.db.ExecContext(ctx, createModerationRecord,
		arg.TakenBy,
		arg.CommentID,
		arg.Reason,
		arg.SetHiddenTo,
		arg.SetRemovedTo,
		arg.AssociatedReport,
	)
	return err
}

const updateCommentHidden = `-- name: UpdateCommentHidden :exec
UPDATE "Comments" SET hidden = $2 WHERE id = $1
`

type UpdateCommentHiddenParams struct {
	ID     int64        `json:"id"`
	Hidden sql.NullBool `json:"hidden"`
}

func (q *Queries) UpdateCommentHidden(ctx context.Context, arg UpdateCommentHiddenParams) error {
	_, err := q.db.ExecContext(ctx, updateCommentHidden, arg.ID, arg.Hidden)
	return err
}

const updateCommentRemove = `-- name: UpdateCommentRemove :exec
UPDATE "Comments" SET removed = $2 WHERE id = $1
`

type UpdateCommentRemoveParams struct {
	ID      int64        `json:"id"`
	Removed sql.NullBool `json:"removed"`
}

func (q *Queries) UpdateCommentRemove(ctx context.Context, arg UpdateCommentRemoveParams) error {
	_, err := q.db.ExecContext(ctx, updateCommentRemove, arg.ID, arg.Removed)
	return err
}

const updateUserBanStatus = `-- name: UpdateUserBanStatus :exec
UPDATE "Users" SET banned = $2
WHERE id = $1
`

type UpdateUserBanStatusParams struct {
	ID     int64        `json:"id"`
	Banned sql.NullBool `json:"banned"`
}

func (q *Queries) UpdateUserBanStatus(ctx context.Context, arg UpdateUserBanStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBanStatus, arg.ID, arg.Banned)
	return err
}
