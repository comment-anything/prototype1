// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package generated

import (
	"context"
)

const changeUserPassword = `-- name: ChangeUserPassword :exec
UPDATE "Users" SET password = $2
WHERE id = $1
`

type ChangeUserPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) ChangeUserPassword(ctx context.Context, arg ChangeUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, changeUserPassword, arg.ID, arg.Password)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "Users" (
    username,
    password,
    email
) VALUES (
    $1, $2, $3
) RETURNING id, username, password, email, created_at, last_login, profile_blurb, banned
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "Users"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password, email, created_at, last_login, profile_blurb, banned FROM "Users"
WHERE "email" = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const getUserByUserId = `-- name: GetUserByUserId :one
SELECT id, username, password, email, created_at, last_login, profile_blurb, banned FROM "Users"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetUserByUserId(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT id, username, password, email, created_at, last_login, profile_blurb, banned FROM "Users"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) GetUserByUserName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, email, created_at, last_login, profile_blurb, banned FROM "Users"
ORDER BY "username"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ProfileBlurb,
			&i.Banned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
