// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createPWResetRecord = `-- name: CreatePWResetRecord :exec
INSERT INTO "PasswordResetCodes" (
    user_id,
    verify_code
) VALUES ($1,$2)
`

type CreatePWResetRecordParams struct {
	UserID     sql.NullInt64  `json:"user_id"`
	VerifyCode sql.NullString `json:"verify_code"`
}

func (q *Queries) CreatePWResetRecord(ctx context.Context, arg CreatePWResetRecordParams) error {
	_, err := q.db.ExecContext(ctx, createPWResetRecord, arg.UserID, arg.VerifyCode)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "Users" (
    username,
    password,
    email
) VALUES (
    $1, $2, $3
) RETURNING id, username, password, email, is_verified, created_at, last_login, profile_blurb, banned
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.IsVerified,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const createVerificationRecord = `-- name: CreateVerificationRecord :exec
INSERT INTO "VerificationCodes" (
    user_id,
    verify_code
) VALUES ($1, $2)
`

type CreateVerificationRecordParams struct {
	UserID     sql.NullInt64  `json:"user_id"`
	VerifyCode sql.NullString `json:"verify_code"`
}

func (q *Queries) CreateVerificationRecord(ctx context.Context, arg CreateVerificationRecordParams) error {
	_, err := q.db.ExecContext(ctx, createVerificationRecord, arg.UserID, arg.VerifyCode)
	return err
}

const deletePWResetRecords = `-- name: DeletePWResetRecords :exec
DELETE FROM "PasswordResetCodes" WHERE user_id = $1
`

func (q *Queries) DeletePWResetRecords(ctx context.Context, userID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deletePWResetRecords, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "Users"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteVerificationRecords = `-- name: DeleteVerificationRecords :exec
DELETE FROM "VerificationCodes" WHERE user_id = $1
`

func (q *Queries) DeleteVerificationRecords(ctx context.Context, userID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteVerificationRecords, userID)
	return err
}

const getPWResetRecord = `-- name: GetPWResetRecord :many
SELECT id, user_id, verify_code, created_on FROM "PasswordResetCodes" WHERE user_id = $1
`

func (q *Queries) GetPWResetRecord(ctx context.Context, userID sql.NullInt64) ([]PasswordResetCode, error) {
	rows, err := q.db.QueryContext(ctx, getPWResetRecord, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PasswordResetCode
	for rows.Next() {
		var i PasswordResetCode
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.VerifyCode,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAdminAssignments = `-- name: GetUserAdminAssignments :one
SELECT "Users".id, "AdminAssignments".assigned_at from "Users" INNER JOIN "AdminAssignments" on "Users".id = "AdminAssignments".user_id WHERE "Users".id = $1
`

type GetUserAdminAssignmentsRow struct {
	ID         int64     `json:"id"`
	AssignedAt time.Time `json:"assigned_at"`
}

func (q *Queries) GetUserAdminAssignments(ctx context.Context, id int64) (GetUserAdminAssignmentsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAdminAssignments, id)
	var i GetUserAdminAssignmentsRow
	err := row.Scan(&i.ID, &i.AssignedAt)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password, email, is_verified, created_at, last_login, profile_blurb, banned FROM "Users"
WHERE "email" = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.IsVerified,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const getUserByUserId = `-- name: GetUserByUserId :one
SELECT id, username, password, email, is_verified, created_at, last_login, profile_blurb, banned FROM "Users"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetUserByUserId(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.IsVerified,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT id, username, password, email, is_verified, created_at, last_login, profile_blurb, banned FROM "Users"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) GetUserByUserName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.IsVerified,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const getUserDomainModeratorAssignments = `-- name: GetUserDomainModeratorAssignments :many
SELECT "Users".id, "DomainModeratorAssignments".assigned_at, "DomainModeratorAssignments".domain FROM "Users" INNER JOIN "DomainModeratorAssignments" on "Users".id = "DomainModeratorAssignments".user_id WHERE "Users".id = $1
`

type GetUserDomainModeratorAssignmentsRow struct {
	ID         int64     `json:"id"`
	AssignedAt time.Time `json:"assigned_at"`
	Domain     string    `json:"domain"`
}

func (q *Queries) GetUserDomainModeratorAssignments(ctx context.Context, id int64) ([]GetUserDomainModeratorAssignmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserDomainModeratorAssignments, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserDomainModeratorAssignmentsRow
	for rows.Next() {
		var i GetUserDomainModeratorAssignmentsRow
		if err := rows.Scan(&i.ID, &i.AssignedAt, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGlobalModeratorAssignments = `-- name: GetUserGlobalModeratorAssignments :one
SELECT "Users".id, "GlobalModeratorAssignments".assigned_at FROM "Users" INNER JOIN "GlobalModeratorAssignments" on "Users".id = "GlobalModeratorAssignments".user_id WHERE "Users".id = $1
`

type GetUserGlobalModeratorAssignmentsRow struct {
	ID         int64     `json:"id"`
	AssignedAt time.Time `json:"assigned_at"`
}

func (q *Queries) GetUserGlobalModeratorAssignments(ctx context.Context, id int64) (GetUserGlobalModeratorAssignmentsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserGlobalModeratorAssignments, id)
	var i GetUserGlobalModeratorAssignmentsRow
	err := row.Scan(&i.ID, &i.AssignedAt)
	return i, err
}

const getVerificationRecord = `-- name: GetVerificationRecord :many
SELECT id, user_id, verify_code, created_on FROM "VerificationCodes" WHERE user_id = $1
`

func (q *Queries) GetVerificationRecord(ctx context.Context, userID sql.NullInt64) ([]VerificationCode, error) {
	rows, err := q.db.QueryContext(ctx, getVerificationRecord, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VerificationCode
	for rows.Next() {
		var i VerificationCode
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.VerifyCode,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserBlurb = `-- name: UpdateUserBlurb :exec
UPDATE "Users" SET profile_blurb = $2
WHERE id = $1
`

type UpdateUserBlurbParams struct {
	ID           int64          `json:"id"`
	ProfileBlurb sql.NullString `json:"profile_blurb"`
}

func (q *Queries) UpdateUserBlurb(ctx context.Context, arg UpdateUserBlurbParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBlurb, arg.ID, arg.ProfileBlurb)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE "Users" SET email = $2
WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE "Users" SET last_login = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE "Users" SET password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserVerification = `-- name: UpdateUserVerification :exec
UPDATE "Users" SET is_verified = $2
WHERE id = $1
`

type UpdateUserVerificationParams struct {
	ID         int64        `json:"id"`
	IsVerified sql.NullBool `json:"is_verified"`
}

func (q *Queries) UpdateUserVerification(ctx context.Context, arg UpdateUserVerificationParams) error {
	_, err := q.db.ExecContext(ctx, updateUserVerification, arg.ID, arg.IsVerified)
	return err
}
