// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reports.sql

package generated

import (
	"context"
)

const getNewestUser = `-- name: GetNewestUser :one
SELECT id, username, password, email, is_verified, created_at, last_login, profile_blurb, banned FROM "Users"
WHERE created_at = (SELECT MIN(created_at) FROM "Users")
`

func (q *Queries) GetNewestUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getNewestUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.IsVerified,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProfileBlurb,
		&i.Banned,
	)
	return i, err
}

const getUserCount = `-- name: GetUserCount :one
SELECT COUNT(id) FROM "Users"
`

func (q *Queries) GetUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, email, is_verified, created_at, last_login, profile_blurb, banned FROM "Users"
ORDER BY "username"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.IsVerified,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ProfileBlurb,
			&i.Banned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
