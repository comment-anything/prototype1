// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: paths.sql

package generated

import (
	"context"
	"database/sql"
)

const createDomain = `-- name: CreateDomain :exec
INSERT INTO "Domains" (
    id
) VALUES ($1) LIMIT 1
`

func (q *Queries) CreateDomain(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, createDomain, id)
	return err
}

const createPath = `-- name: CreatePath :exec
INSERT INTO "Paths" (
    domain,
    path
) VALUES ($1, $2)
`

type CreatePathParams struct {
	Domain sql.NullString `json:"domain"`
	Path   sql.NullString `json:"path"`
}

func (q *Queries) CreatePath(ctx context.Context, arg CreatePathParams) error {
	_, err := q.db.ExecContext(ctx, createPath, arg.Domain, arg.Path)
	return err
}

const getDomain = `-- name: GetDomain :one
SELECT id FROM "Domains" 
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetDomain(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getDomain, id)
	err := row.Scan(&id)
	return id, err
}

const getPath = `-- name: GetPath :one
SELECT id, domain, path FROM "Paths"
WHERE "domain" = $1 and "path" = $2 LIMIT 1
`

type GetPathParams struct {
	Domain sql.NullString `json:"domain"`
	Path   sql.NullString `json:"path"`
}

func (q *Queries) GetPath(ctx context.Context, arg GetPathParams) (Path, error) {
	row := q.db.QueryRowContext(ctx, getPath, arg.Domain, arg.Path)
	var i Path
	err := row.Scan(&i.ID, &i.Domain, &i.Path)
	return i, err
}
